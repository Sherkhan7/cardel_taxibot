import logging
import re
import ujson

from telegram import (
    Update,
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ParseMode,
    TelegramError
)
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    CallbackContext,
    Filters,
)
from DB import *
from languages import LANGS
from layouts import get_active_driver_layout, get_only_user_data_layout
from globalvariables import *
from helpers import *
from errorhandler import error_handler
from replykeyboards import ReplyKeyboard
from replykeyboards.replykeyboardvariables import *

from inlinekeyboards import InlineKeyboard
from inlinekeyboards.inlinekeyboardvariables import *

logger = logging.getLogger()


def search_conversation_callback(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    user_data = context.user_data

    if user[LANG] == LANGS[0]:
        choose_region_text = "Qayerdan (Viloyatni tanlang)"

    if user[LANG] == LANGS[1]:
        choose_region_text = "–û—Ç–∫—É–¥–∞ (–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å)"

    if user[LANG] == LANGS[2]:
        choose_region_text = "“ö–∞–µ—Ä–¥–∞–Ω (–í–∏–ª–æ—è—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥)"

    choose_region_text = f'{choose_region_text}:'
    inline_keyboard = InlineKeyboard(regions_keyboard, user[LANG]).get_keyboard()

    update.message.reply_text(update.message.text, reply_markup=ReplyKeyboardRemove())
    message = update.message.reply_text(choose_region_text, reply_markup=inline_keyboard)

    user_data[STATE] = FROM_REGION
    user_data[MESSAGE_ID] = message.message_id

    return REGION


def region_callback(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    user_data = context.user_data
    callback_query = update.callback_query

    if user[LANG] == LANGS[0]:
        from_text = "Qayerdan"
        to_text = "Qayerga"
        district_text = "(Tumanni tanlang)"

    if user[LANG] == LANGS[1]:
        from_text = "–û—Ç–∫—É–¥–∞"
        to_text = "–ö—É–¥–∞"
        district_text = "(–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω)"

    if user[LANG] == LANGS[2]:
        from_text = "“ö–∞–µ—Ä–¥–∞–Ω"
        to_text = "“ö–∞–µ—Ä–≥–∞"
        district_text = "(–¢—É–º–∞–Ω–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥)"

    if user_data[STATE] == FROM_REGION:
        state = FROM_DISTRICT
        text = from_text

    elif user_data[STATE] == TO_REGION:
        text = to_text
        state = TO_DISTRICT

    text = f'{text} {district_text}:'

    region_id = callback_query.data
    user_data[user_data[STATE]] = str(region_id)  # str() because region_id is srting in database

    inline_keyboard = InlineKeyboard(districts_keyboard, user[LANG], data=region_id).get_keyboard()

    callback_query.edit_message_text(text, reply_markup=inline_keyboard)
    callback_query.answer()

    user_data[STATE] = state

    # logger.info('user_data: %s', user_data)
    return DISTRICT


def district_callback(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    user_data = context.user_data
    callback_query = update.callback_query
    data = callback_query.data

    if user[LANG] == LANGS[0]:
        from_text = "Qayerdan"
        to_text = "Qayerga"
        region_text = "(Viloyatni tanlang)"
        stop_btn = "Qidiruvni to'xtatish"
        set_seats_text = "Yo'lovchi sonini belgilang"

    if user[LANG] == LANGS[1]:
        from_text = "–û—Ç–∫—É–¥–∞"
        to_text = "–ö—É–¥–∞"
        region_text = "(–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å)"
        stop_btn = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"
        set_seats_text = "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"

    if user[LANG] == LANGS[2]:
        from_text = "“ö–∞–µ—Ä–¥–∞–Ω"
        to_text = "“ö–∞–µ—Ä–≥–∞"
        region_text = "(–í–∏–ª–æ—è—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥)"
        stop_btn = "“ö–∏–¥–∏—Ä—É–≤–Ω–∏ —Ç—û—Ö—Ç–∞—Ç–∏—à"
        set_seats_text = "–ô—û–ª–æ–≤—á–∏ —Å–æ–Ω–∏–Ω–∏ –±–µ–ª–≥–∏–ª–∞–Ω–≥"

    if data == 'back' or user_data[STATE] == FROM_DISTRICT:

        if data == 'back':
            if user_data[STATE] == FROM_DISTRICT:
                state = FROM_REGION
                text = from_text
            elif user_data[STATE] == TO_DISTRICT:
                text = to_text
                state = TO_REGION

            user_data.pop(state)

        else:
            state = TO_REGION
            text = to_text
            user_data[user_data[STATE]] = int(data)

        text = f'{text} {region_text}:'
        inline_keyboard = InlineKeyboard(regions_keyboard, user[LANG]).get_keyboard()
        callback_query.edit_message_text(text, reply_markup=inline_keyboard)
        callback_query.answer()

        user_data[STATE] = state

        # logger.info('user_data: %s', user_data)
        return REGION

    elif user_data[STATE] == TO_DISTRICT:

        user_data[user_data[STATE]] = int(data)

        reply_keyboard = ReplyKeyboardMarkup([
            [
                KeyboardButton('1'),
                KeyboardButton('2'),
                KeyboardButton('3'),
                KeyboardButton('4'),
            ],
            [KeyboardButton(f'üîç {stop_btn}')]
        ], resize_keyboard=True)

        try:
            callback_query.delete_message()
        except TelegramError:
            callback_query.edit_message_reply_markup()

        callback_query.message.reply_text(set_seats_text, reply_markup=reply_keyboard)

        user_data[STATE] = EMPTY_SEATS
        user_data.pop(MESSAGE_ID)

        # logger.info('user_data: %s', user_data)
        return EMPTY_SEATS


def empty_seats_callback(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    user_data = context.user_data
    context.bot.send_chat_action(update.effective_user.id, 'typing')

    stop_search = re.search("(Qidiruvni to'xtatish|–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫|“ö–∏–¥–∏—Ä—É–≤–Ω–∏ —Ç—û—Ö—Ç–∞—Ç–∏—à)$", update.message.text)

    if user[LANG] == LANGS[0]:
        not_found_text = "Kechirasiz, birortaham taksi topilmadi"
        found_text = "Barcha topilgan taksilar soni"
        stop_search_text = "Qidiruv to'xtatildi"
        from_text = "Qayerdan"
        to_text = "Qayerga"
        empty_seats_text = "Yo'lovchi soni"
        search_text = "Qidiruv so'rovi"
        search_result_text = "Qidiruv natijasi"
        btn_text = "Lokatsiya yuborish"

    if user[LANG] == LANGS[1]:
        not_found_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞–∫—Å–∏"
        found_text = "–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫—Å–∏"
        stop_search_text = "–ü–æ–∏—Å–∫ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        from_text = "–û—Ç–∫—É–¥–∞"
        to_text = "–ö—É–¥–∞"
        empty_seats_text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"
        search_text = "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        search_result_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"
        btn_text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"

    if user[LANG] == LANGS[2]:
        not_found_text = "–ö–µ—á–∏—Ä–∞—Å–∏–∑, –±–∏—Ä–æ—Ä—Ç–∞“≥–∞–º —Ç–∞–∫—Å–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏"
        found_text = "–ë–∞—Ä—á–∞ —Ç–æ–ø–∏–ª–≥–∞–Ω —Ç–∞–∫—Å–∏–ª–∞—Ä —Å–æ–Ω–∏"
        stop_search_text = "“ö–∏–¥–∏—Ä—É–≤ —Ç—û—Ö—Ç–∞—Ç–∏–ª–¥–∏"
        from_text = "“ö–∞–µ—Ä–¥–∞–Ω"
        to_text = "“ö–∞–µ—Ä–≥–∞"
        empty_seats_text = "–ô—û–ª–æ–≤—á–∏ —Å–æ–Ω–∏"
        search_text = "“ö–∏–¥–∏—Ä—É–≤ —Å—û—Ä–æ–≤–∏"
        search_result_text = "“ö–∏–¥–∏—Ä—É–≤ –Ω–∞—Ç–∏–∂–∞—Å–∏"
        btn_text = "–õ–æ–∫–∞—Ü–∏—è —é–±–æ—Ä–∏—à"

    if stop_search:
        stop_search_text = f'‚Äº {stop_search_text} !'
        reply_keyboard = ReplyKeyboard(main_menu_keyboard, user[LANG]).get_keyboard()
        update.message.reply_text(stop_search_text, reply_markup=reply_keyboard)

        user_data.clear()
        return ConversationHandler.END

    user_data[EMPTY_SEATS] = int(update.message.text)

    from_point = get_region_and_district(user_data[FROM_REGION], user_data[FROM_DISTRICT])
    from_region_name = from_point[0][f'name_{user[LANG]}']
    from_district_name = from_point[1][f'name_{user[LANG]}']

    to_point = get_region_and_district(user_data[TO_REGION], user_data[TO_DISTRICT])
    to_region_name = to_point[0][f'name_{user[LANG]}']
    to_district_name = to_point[1][f'name_{user[LANG]}']

    search_query_text = f"{wrap_tags(search_text)}:\n\n" \
                        f"üìç {from_text}: <b>{from_region_name}, {from_district_name}</b>\n\n" \
                        f"üèÅ {to_text}: <b>{to_region_name}, {to_district_name}</b>\n\n" \
                        f"üèÉ {empty_seats_text}: <b>{update.message.text}</b>"

    search_from_region_id = user_data[FROM_REGION]
    search_from_district_id = user_data[FROM_DISTRICT]

    search_to_region_id = user_data[TO_REGION]
    search_to_district_id = user_data[TO_DISTRICT]

    empty_seats_list = [i for i in range(user_data[EMPTY_SEATS], 5)]
    active_drivers = get_active_drivers_by_seats(empty_seats_list)

    found_active_drivers = []
    for active_driver in active_drivers:
        from_ = ujson.loads(active_driver['from_'])
        to_ = ujson.loads(active_driver['to_'])
        found_from_region = search_from_region_id in from_
        found_to_region = search_to_region_id in to_

        if found_from_region and found_to_region:

            found_from_district = search_from_district_id in from_[search_from_region_id]
            found_to_district = search_to_district_id in to_[search_to_region_id]

            if found_to_district and found_from_district:
                found_active_drivers.append(active_driver)

    found_active_drivers_num = len(found_active_drivers)

    if not found_active_drivers:
        text = f'{search_query_text}\n\n' \
               f'{wrap_tags(search_result_text)}:\n\n' \
               f'üôä {not_found_text}'
        update.message.reply_html(text)

    else:

        for found_active_driver in found_active_drivers:
            driver_user_data = get_user(found_active_driver[USER_ID])
            driver_and_car_data = get_driver_and_car_data(found_active_driver[USER_ID])
            data = set_data(driver_user_data, driver_and_car_data, found_active_driver)
            active_driver_layout = get_active_driver_layout(user[LANG], data=data)

            inline_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(f'üìç {btn_text}', callback_data=f'dr_{found_active_driver[USER_ID]}')]
            ])
            update.message.reply_html(active_driver_layout, reply_markup=inline_keyboard)

        text = f'\n\n{wrap_tags(search_result_text)}:\n\n' \
               f'üöï  {found_text}: <b>{found_active_drivers_num}</b>'
        text = search_query_text + text
        update.message.reply_html(text)

    data_ = {
        USER_ID: user[ID],
        FROM_REGION: user_data[FROM_REGION],
        FROM_DISTRICT: user_data[FROM_DISTRICT],
        TO_REGION: user_data[TO_REGION],
        TO_DISTRICT: user_data[TO_DISTRICT],
        EMPTY_SEATS: user_data[EMPTY_SEATS],
        'found_active_drivers': found_active_drivers_num,
    }
    insert_data(data_, 'search_history')

    # logger.info('user_data: %s', user_data)
    return


def select_driver_callback(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    user_data = context.user_data
    callback_query = update.callback_query

    driver_user_id = update.callback_query.data.split('_')[-1]
    driver_user_data = get_user(driver_user_id)
    icon = 'üìç'

    if user[LANG] == LANGS[0]:
        reply_text = f"Haydovchi {wrap_tags(driver_user_data[FULLNAME])} ga lokatsiyangizni " \
                     f"yuborish uchun ¬´{icon} Lokatsiyamni yuborish¬ª tugmasini bosing"
        btn_text = "Qidiruvga qaytish"
    if user[LANG] == LANGS[1]:
        reply_text = f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´{icon} –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ¬ª, " \
                     f"—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é {wrap_tags(driver_user_data[FULLNAME])} —É"
        btn_text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É"
    if user[LANG] == LANGS[2]:
        reply_text = f"“≤–∞–π–¥–æ–≤—á–∏ {wrap_tags(driver_user_data[FULLNAME])} –≥–∞ –ª–æ–∫–∞—Ü–∏—è–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏—à —É—á—É–Ω " \
                     f"¬´{icon} –õ–æ–∫–∞—Ü–∏—è–º–Ω–∏ —é–±–æ—Ä–∏—à¬ª —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥"
        btn_text = "“ö–∏–¥–∏—Ä—É–≤–≥–∞ “õ–∞–π—Ç–∏—à"

    reply_text = f'üöï {reply_text}'
    reply_keyboard = ReplyKeyboard(location_keyboard, user[LANG]).get_keyboard()
    reply_keyboard.keyboard.append([KeyboardButton(f'‚óÄÔ∏è {btn_text}')])

    callback_query.message.reply_text(reply_text, reply_markup=reply_keyboard, parse_mode=ParseMode.HTML)
    try:
        callback_query.answer()
    except TelegramError:
        pass

    driver_user_data.pop('created_at')
    driver_user_data.pop('updated_at')

    user_data[STATE] = SEND_LOCATION
    user_data['driver_data'] = driver_user_data

    # logger.info('user_data: %s', user_data)
    return SEND_LOCATION


def send_location_callback(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    user_data = context.user_data

    if user[LANG] == LANGS[0]:
        stop_btn = "Qidiruvni to'xtatish"
        sending_error_text = "Lokatsiyani yuborishda xatolik yuz berdi"
        driver_data_not_found = "Haydovchi ma'lumotlari topilmadi"
        sent_text = f"Lokatsiyangiz haydovchi {wrap_tags(user_data['driver_data'][FULLNAME])} ga yetkazildi"
    if user[LANG] == LANGS[1]:
        stop_btn = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"
        sending_error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"
        driver_data_not_found = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä–∞–π–≤–µ—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        sent_text = f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é {wrap_tags(user_data['driver_data'][FULLNAME])} —É"
    if user[LANG] == LANGS[2]:
        stop_btn = "“ö–∏–¥–∏—Ä—É–≤–Ω–∏ —Ç—û—Ö—Ç–∞—Ç–∏—à"
        sending_error_text = "Lokatsiyani yuborishda xatolik yuz berdi"
        driver_data_not_found = "“≤–∞–π–¥–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏"
        sent_text = f"–õ–æ–∫–∞—Ü–∏—è–Ω–≥–∏–∑ “≥–∞–π–¥–æ–≤—á–∏ {wrap_tags(user_data['driver_data'][FULLNAME])} –≥–∞ –µ—Ç–∫–∞–∑–∏–ª–¥–∏"

    sending_error_text = f'‚Äº {sending_error_text} üò•'
    driver_data_not_found = f'‚Äº {driver_data_not_found} üò•'
    sent_text = f'‚úÖ {sent_text} !'

    reply_keyboard = ReplyKeyboardMarkup([
        [
            KeyboardButton('1'),
            KeyboardButton('2'),
            KeyboardButton('3'),
            KeyboardButton('4'),
        ],
        [KeyboardButton(f'üîç {stop_btn}')]
    ], resize_keyboard=True)

    if not update.message.location:
        reply_text = update.message.text

    else:

        if 'driver_data' in user_data:

            if user_data['driver_data'][LANG] == LANGS[0]:
                text_to_driver = f"Yo'lovchi {wrap_tags(user[FULLNAME])} sizga o'z lokatsiyasini yubordi"
            if user_data['driver_data'][LANG] == LANGS[1]:
                text_to_driver = f"–ü–∞—Å—Å–∞–∂–∏—Ä {wrap_tags(user[FULLNAME])} —Å–æ–æ–±—â–∏–ª –≤–∞–º —Å–≤–æ–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ"
            if user_data['driver_data'][LANG] == LANGS[2]:
                text_to_driver = f"–ô—û–ª–æ–≤—á–∏ {wrap_tags(user[FULLNAME])} —Å–∏–∑–≥–∞ —û–∑ –ª–æ–∫–∞—Ü–∏—è—Å–∏–Ω–∏ —é–±–æ—Ä–¥–∏"

            text_to_driver = f'üìç {text_to_driver} üôÇ'

            location_dict = update.message.location.to_dict()
            data = {
                'location': ujson.dumps(location_dict),
                'from_user_id': user[ID],
                'to_user_id': user_data['driver_data'][ID],
            }

            try:
                # Fake user need to change layout lang corresponding to driver's lang
                fake_user = dict(user)
                fake_user[LANG] = user_data['driver_data'][LANG]
                only_user_data_layout = get_only_user_data_layout(fake_user)

                text_to_driver += f'\n\n{only_user_data_layout}'
                inline_keyboard = InlineKeyboard(geolocation_keyboard, user[LANG], data=location_dict).get_keyboard()
                context.bot.send_message(user_data['driver_data'][TG_ID], text_to_driver,
                                         parse_mode=ParseMode.HTML, reply_markup=inline_keyboard)
                data.update({STATUS: 'successfull'})
                reply_text = sent_text
            except TelegramError as e:
                reply_text = sending_error_text
                # Send an error to the DEVELOPER
                # set context.error to e object to get error's __traceback__ attribute
                context.error = e
                error_handler(update, context)
                data.update({STATUS: 'notsent'})

            insert_data(data, 'sent_locations_history')

        else:
            reply_text = driver_data_not_found

    update.message.reply_text(reply_text, reply_markup=reply_keyboard, parse_mode=ParseMode.HTML)

    user_data[STATE] = EMPTY_SEATS
    if 'driver_data' in user_data:
        user_data.pop('driver_data')

    # logger.info('user_data: %s', user_data)
    return EMPTY_SEATS


def search_fallback(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    user_data = context.user_data

    if update.message.text == '/start' or update.message.text == '/menu' or update.message.text == '/cancel':

        if user[LANG] == LANGS[0]:
            text = "Qidruv bekor qilindi"
        if user[LANG] == LANGS[1]:
            text = "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        if user[LANG] == LANGS[2]:
            text = "“ö–∏–¥–∏—Ä—É–≤ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏"

        text = f'‚Äº {text} !'
        delete_message_by_message_id(context, user)

        reply_keyboard = ReplyKeyboard(main_menu_keyboard, user[LANG]).get_keyboard()
        update.message.reply_text(text, reply_markup=reply_keyboard)

        user_data.clear()

        return ConversationHandler.END

    else:

        if user[LANG] == LANGS[0]:
            text = "Hozir siz taksi qidirish bo'limidasiz.\n\n" \
                   "Qidiruvni to'xtatish uchun /cancel ni bosing"

        if user[LANG] == LANGS[1]:
            text = "–°–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∏—Å–∫–∞ —Ç–∞–∫—Å–∏.\n\n" \
                   "–ù–∞–∂–º–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"

        if user[LANG] == LANGS[2]:
            text = "“≤–æ–∑–∏—Ä —Å–∏–∑ —Ç–∞–∫—Å–∏ “õ–∏–¥–∏—Ä–∏—à –±—û–ª–∏–º–∏–¥–∞—Å–∏–∑.\n\n" \
                   "“ö–∏–¥–∏—Ä—É–≤–Ω–∏ —Ç—û—Ö—Ç–∞—Ç–∏—à —É—á—É–Ω /cancel –Ω–∏ –±–æ—Å–∏–Ω–≥"

        text = f'‚Äº {text}.'
        update.message.reply_text(text)

        return


search_conversation_handler = ConversationHandler(
    entry_points=[
        MessageHandler(Filters.regex(r"(Taksi qidirish|–ü–æ–∏—Å–∫ —Ç–∞–∫—Å–∏|–¢–∞–∫—Å–∏ “õ–∏–¥–∏—Ä–∏—à)$") & (~Filters.update.edited_message),
                       search_conversation_callback)],

    states={
        REGION: [CallbackQueryHandler(region_callback, pattern=r'^\d+$')],

        DISTRICT: [CallbackQueryHandler(district_callback, pattern=r'^(back|\d+)$')],

        EMPTY_SEATS: [
            MessageHandler(Filters.regex("([1-4])|(Qidiruvni to'xtatish|–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫|“ö–∏–¥–∏—Ä—É–≤–Ω–∏ —Ç—û—Ö—Ç–∞—Ç–∏—à)"),
                           empty_seats_callback),
            CallbackQueryHandler(select_driver_callback, pattern=r'^dr_\d+$')
        ],
        SEND_LOCATION: [MessageHandler(Filters.regex("(Qidiruvga qaytish|–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É|“ö–∏–¥–∏—Ä—É–≤–≥–∞ “õ–∞–π—Ç–∏—à)$"),
                                       send_location_callback),
                        MessageHandler(Filters.location, send_location_callback)]
    },

    fallbacks=[MessageHandler(Filters.text & (~Filters.update.edited_message), search_fallback)],

    persistent=True,

    name='search_conversation'
)
